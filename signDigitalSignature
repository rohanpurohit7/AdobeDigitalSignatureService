package com.Rohan;

import com.itextpdf.text.DocumentException;
import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Hashtable;
import java.util.Properties;
import com.itextpdf.text.Element;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Hashtable;
import java.io.File;
import com.adobe.livecycle.formsservice.utils.FormsServiceClientUtils;
import com.adobe.livecycle.signatures.client.*;
import com.adobe.livecycle.signatures.client.types.*;
import com.adobe.livecycle.signatures.pki.client.types.common.HashAlgorithm;
import com.adobe.idp.Document;
import com.adobe.idp.dsc.clientsdk.ServiceClientFactory;
import com.adobe.idp.dsc.clientsdk.ServiceClientFactoryProperties;


/**
 * Created by Rohan on 12/30/2016.
 /* Test in SOAP mode add the followin jars in the  in the build path:
 * 1. adobe-signatures-client.jar
 * 2. adobe-livecycle-client.jar
 * 3. adobe-usermanager-client.jar
 * 4. adobe-utilities.jar
 * 5. jbossall-client.jar (use a different JAR file if LiveCycle ES is not deployed
 * on JBoss)
 * 6. activation.jar (required for SOAP mode)
 * 7. axis.jar (required for SOAP mode)
 * 8. commons-codec-1.3.jar (required for SOAP mode)
 * 9.  commons-collections-3.1.jar  (required for SOAP mode)
 * 10. commons-discovery.jar (required for SOAP mode)
 * 11. commons-logging.jar (required for SOAP mode)
 * 12. dom3-xml-apis-2.5.0.jar (required for SOAP mode)
 * 13. jaxen-1.1-beta-9.jar (required for SOAP mode)
 * 14. jaxrpc.jar (required for SOAP mode)
 * 15. log4j.jar (required for SOAP mode)
 * 16. mail.jar (required for SOAP mode)
 * 17. saaj.jar (required for SOAP mode)
 * 18. wsdl4j.jar (required for SOAP mode)
 * 19. xalan.jar (required for SOAP mode)
 * 20. xbean.jar (required for SOAP mode)
 * 21. xercesImpl.jar (required for SOAP mode)
 *
 *  These JAR files are located in the following path:
 * <install directory>/Adobe/Adobe LiveCycle ES2/LiveCycle_ES_SDK/client-libs/common
 *
 * The adobe-utilities.jar file is located in the following path:
 * <install directory>/Adobe/Adobe LiveCycle ES2/LiveCycle_ES_SDK/client-libs/jboss
 *
 * The jbossall-client.jar file is located in the following path:
 * <install directory>/Adobe/Adobe LiveCycle ES2/jboss/client
 *
 * SOAP required JAR files are located in the following path:
 * <install directory>/Adobe/Adobe LiveCycle ES2/LiveCycle_ES_SDK/client-libs/thirdparty
 *
 * If you want to invoke a remote LiveCycle ES instance and there is a
 * firewall between the client application and LiveCycle ES, then it is
 * recommended that you use the SOAP mode. When using the SOAP mode,
 * you have to include these additional JAR files
 *
 * For information about the SOAP
 * mode, see "Setting connection properties" in Programming
 * with LiveCycle ES2
 */


public class signDigitalSignature {{
        //alternatively you can change the method signature of the addSignature method to output a byte array and save that byte array to the result destination
       //  private static final String result = "C:/DigitallySigned.pdf";

    private static final String src = "C:/pdfwithaSignatureField.pdf";



        public static void main(String[] args) throws IOException,DocumentException {
            signDigitalSignature ab= new signDigitalSignature();
            byte[] inPDF = ab.getBytesFromFile("C:\\pdfwithaSignatureField.pdf");
            ab.addSignature(inPDF);
                    }

        public File addSignature(byte[] inPDF) throws IOException, DocumentException{

            System.out.println("Assigning the document that will go in to be digitally signed");
            ByteArrayInputStream bais = new ByteArrayInputStream(inPDF);
            ByteArrayOutputStream baos =new ByteArrayOutputStream();
            System.out.println("About to assign inputStream to reader");



            try
            {
                //Set connection properties required to invoke LiveCycle ES
                System.out.println("***Now Entered Connection Props of Digital Signer Implementation***");
                Properties connectionProps = new Properties();
                //Digital Signature AdobeLivecycle Connection Parameters Initialization
                String defaultAdobeURL = null;
                String defaultAdobeUserID = null;
                String defaultAdobePasskey = null;
                //Digital Signature Stamp Metadata Parameters Initialization
                String digSigReason =null;
                String digSigLocation = null;
                String digSigContactInfo = null;
                String hsmAlias = null;

                defaultAdobeURL = System.getProperty("com.ibm.pdfutil.AdobeLiveCycleURL");
                System.out.println("The current Adobe LiveCycle Instance is >" +defaultAdobeURL);
                defaultAdobeUserID = System.getProperty("com.rohan.AdobeLiveCycleUserName");
                System.out.println("The current Adobe LiveCycle Instance UserName is >" + defaultAdobeUserID);
                defaultAdobePasskey = System.getProperty("com.rohan.AdobeLiveCyclePassword");
                System.out.println("The current Adobe LiveCycle Instance Password is >" +defaultAdobePasskey);

                connectionProps.setProperty(ServiceClientFactoryProperties.DSC_DEFAULT_SOAP_ENDPOINT, defaultAdobeURL);//defaultAdobeURLSIT //http://153.40.33.114:22511
                connectionProps.setProperty(ServiceClientFactoryProperties.DSC_TRANSPORT_PROTOCOL,ServiceClientFactoryProperties.DSC_SOAP_PROTOCOL);
                connectionProps.setProperty(ServiceClientFactoryProperties.DSC_SERVER_TYPE, "WebSphere");
                connectionProps.setProperty(ServiceClientFactoryProperties.DSC_CREDENTIAL_USERNAME,defaultAdobeUserID); //defaultAdobeUserID
                connectionProps.setProperty(ServiceClientFactoryProperties.DSC_CREDENTIAL_PASSWORD,defaultAdobePasskey);//defaultAdobePasskey
                // Create a ServiceClientFactory instance
                ServiceClientFactory myFactory = ServiceClientFactory.createInstance(connectionProps);
                System.out.println("Connection to Adobe Livecycle ES3 established");

                //Create a SignatureServiceClient object
                SignatureServiceClient signClient = new SignatureServiceClient(myFactory);

                //Specify a PDF document to which a signature field is added
                //FileInputStream fileInputStream = new FileInputStream("C:\\pdfFilewithaSignatureLine.pdf");
                Document unsignedPDF = new Document (bais);

                //Specify the name of the signature field
                String fieldName = "myCompanys-DigitalSignature";

                //Create a  PositionRectangle object that specifies
                //the signature fields location
                PositionRectangle post = new  PositionRectangle(435,15,133,50);
                //Specify the page number that will contain the signature field
                java.lang.Integer pageNum = new java.lang.Integer(1);

                //Add a signature field to the PDF document
                Document sigFieldPDF = signClient.addSignatureField(
                        unsignedPDF,
                        fieldName,
                        pageNum,
                        post,
                        null,
                        null);

                //Specify the credential Alias
                hsmAlias = System.getProperty("com.rohan.HSMAlias");//"Hardware Security Module(HSM) Name"
                String yourHSMAlias = hsmAlias;
                System.out.println("The Alias for the HSM in use is >"+hsmAlias);

                //Create a Credential object
                Credential myCred = Credential.getInstance(yourHSMAlias); //HSM Name

                //Specify the reason to sign the document
                digSigReason= System.getProperty("com.rohan.DigitalSignatureReason");//"This PDF is digitally signed and verified for Rohan Purohit.";
                String reason = digSigReason;//"This PDF is digitally signed and verified for Rohan Purohit.";
                System.out.println("The reason for this signature is >" +digSigReason);

                //Specify the location of the signer
                digSigLocation= System.getProperty("com.rohan.DigitalSignatureLocation");//" USA";
                String location  = digSigLocation;//"USA.";
                System.out.println("The location of the signing party is >" +digSigLocation);

                //Specify contact information
                digSigContactInfo= System.getProperty("com.rohan.DigitalSignatureContactInfo");//"Rohan Purohits Team";
                String contactInfo = digSigContactInfo;//"Rohan Purohits Team.";
                System.out.println("The contactInfo of the signer is >" +digSigContactInfo);

                //Create a PDFSignatureAppearanceOptions object and metadata in the stamp
                PDFSignatureAppearanceOptionSpec appear = new  PDFSignatureAppearanceOptionSpec();
                appear.setShowDate(true);
                appear.setShowReason(true);

                //Set revocation checking to false-? no CRLServe/OCSP check- use security credential(HSM)/pfx(PKCS#12)
                java.lang.Boolean revCheck = new Boolean(true);

                //Create an OCSPOptionSpec object to pass to the sign method
                OCSPOptionSpec ocspSpec = new OCSPOptionSpec();

                //Create a CRLOptionSpec object to pass to the sign method
                CRLOptionSpec crlSpec = new CRLOptionSpec();

                //Create a TSPOptionSpec object to pass to the sign method
                TSPOptionSpec tspSpec = new TSPOptionSpec();
                //String fieldName = "SignatureField1";

                //Sign the PDF document
                Document signedDoc = signClient.sign(
                        sigFieldPDF,
                        "RohanPurohit's-DigitalSignature",
                        myCred,
                        HashAlgorithm.SHA1,
                        reason,
                        location,
                        contactInfo,
                        appear,
                        revCheck,
                        ocspSpec,
                        crlSpec,
                        tspSpec);

                //Save the signed PDF document
                Document out =  signedDoc;
                File outFile = new File("C:\\DigitallySigned.pdf");
                signedDoc.copyToFile(outFile);

	              }
            catch (Exception ee)
            {
                ee.printStackTrace();
            }
            return outFile;

        }
        private int inStream(byte[] buffer) {
            // TODO Auto-generated method stub
            return 0;
        }
        private byte[] getBytesFromFile(String src) throws IOException {
            FileInputStream fs=new FileInputStream(src);
            byte[] inPDF= new byte[fs.available()];
            fs.read(inPDF);
            return inPDF;
        }
        private void writeBytestoFile(String dest, byte[] inPDF) throws IOException{
            FileOutputStream fs=new FileOutputStream(dest);
            fs.write(inPDF);
            fs.close();
        }
    }




